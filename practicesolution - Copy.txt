LOAD CSV WITH HEADERS FROM
"file:///EPL_matches.csv" as row
MERGE (t1:Team:HomeTeam {name: row.HomeTeam, halfTimeGoal: toInteger(row.HTHG), fullTimeGoal: toInteger(row.FTHG)})-[:PLAYED]->(m:Match{season: row.Season, dateTime: row.DateTime, halfTimeResult: row.HTR, fullTimeResult: row.FTR, referee: row.Referee})<-[:PLAYED]-(t2:Team:AwayTeam {name: row.AwayTeam, halfTimeGoal: toInteger(row.HTAG), fullTimeGoal: toInteger(row.FTAG)});

MATCH(t1:HomeTeam)-[:PLAYED]->(m:Match)<-[:PLAYED]-(t2:AwayTeam)
with t1,m,t2,
CASE m.fullTimeResult
	WHEN 'H' THEN {winner: t1.name, loser: t2.name}
	WHEN 'A' THEN {winner: t2.name, loser: t1.name}
	ELSE {winner: "DRAW", loser: "DRAW"}
END as value
SET m += value

WITH t1,m,t2,
CASE m.halfTimeResult
	WHEN 'H' THEN {halfTimeWinner: t1.name, halfTimeLoser: t2.name}
	WHEN 'A' THEN {halfTimeWinner: t2.name, halfTimeLoser: t1.name}
	ELSE {halfTimeWinner: "DRAW", halfTimeLoser: "DRAW"}
END as value1
SET m+= value1
RETURN t1, m, t2;

MATCH(t1:HomeTeam)-[:PLAYED]->(m:Match)
WHERE m.fullTimeResult = 'H'
SET m += {winner: t1.name};

1=>
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season >= "2000-01"
RETURN DISTINCT t.name;

2=> 
MATCH (l:Team {name: 'Liverpool'})-[:PLAYED]->(m:Match)<-[:PLAYED]-(u:Team {name: 'Man United'})
WHERE m.season >= "2010" AND m.winner = 'Liverpool'
RETURN l,m,u;

3=>
MATCH (m:Match)
WHERE m.season >= "2000"
RETURN DISTINCT m.referee, COUNT (*) AS total_matches
LIMIT 5;

4=> 
MATCH (t1:Team)-[:PLAYED]->(m:Match)<-[:PLAYED]-(t2:Team)
WHERE m.season = "2020-21"
RETURN t1.name, SUM(t1.fullTimeGoal) AS scored, SUM(t2.fullTimeGoal) As conceded;
	
// Testing
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season = "2020-21"
RETURN DISTINCT t.name;

MATCH (t:Team)-[:PLAYED]->(m:Match)<-[:PLAYED]-(t1:Team)
WHERE m.season = "2020-21" AND t.name = "Arsenal"
RETURN DISTINCT t.name, SUM(t.fullTimeGoal), SUM(t1.fullTimeGoal) As conceded;

5=>
MATCH (t:HomeTeam)-[:PLAYED]->(m:Match)
WHERE m.season >= "2000-01" AND m.winner = t.name
RETURN DISTINCT t.name AS Team, COUNT(t) AS total_matches
ORDER BY total_matches DESC
LIMIT 1;

6=> 
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season = "2020-21" AND m.loser = t.name
RETURN DISTINCT t.name AS Team, COUNT(m) AS lost_matches
ORDER BY lost_matches DESC
LIMIT 1;

// Testing the result
//Test: total 297 win matches
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season = "2020-21" AND m.winner = t.name
RETURN DISTINCT t.name AS Team, COUNT(t) AS total_matches
ORDER BY total_matches DESC;

//Total matches = 380
MATCH (n:Match) WHERE n.season= "2016-17" RETURN COUNT (n);

// 83 DRAW MATCHES
MATCH (n:Match) WHERE n.season= "2020-21" AND n.winner = 'DRAW' RETURN COUNT (n);

// Total Team in season 2020-21
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season = "2020-21"
RETURN DISTINCT t.name;

// Here sheffeld united has most lost matches i.e 29 , 2 are draw
MATCH (t:Team)-[:PLAYED]->(n:Match) WHERE n.season= "2020-21" AND t.name="Sheffield United" RETURN COUNT (n);

// Getting draw matches
MATCH (t:Team)-[:PLAYED]->(n:Match) WHERE n.season= "2020-21" AND n.winner= "DRAW" AND t.name="Sheffield United" RETURN COUNT (n);


7=>
MATCH (t1:Team)-[:PLAYED]->(m:Match)<-[:PLAYED]-(t2:Team)
WHERE m.season = "2020-21" AND (m.halfTimeLoser = t1.name AND m.winner = t1.name)
RETURN t1, m, t2;

8 =>
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season >= "2000-01"
RETURN DISTINCT t.name As Team, m.season As season, SUM(
			CASE m.winner
				WHEN t.name THEN 3
				WHEN "DRAW" THEN 1
				ELSE 0
			END) AS points
ORDER BY season, points DESC;


9=>

MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season = "2020-21"
RETURN DISTINCT t.name AS Ranking, SUM(
			CASE m.winner
				WHEN t.name THEN 3
				WHEN "DRAW" THEN 1
				ELSE 0
			END) AS Points
ORDER BY Points DESC;
		
Testing:
ATCH (t:Team)-[:PLAYED]->(n:Match) WHERE n.season>= "2000-01" AND n.winner= "DRAW" AND t.name="Man United" RETURN COUNT(n); 
// 176 matches

MATCH (t:Team)-[:PLAYED]->(n:Match) WHERE n.season>= "2000-01" AND n.winner= t.name AND t.name="Man United" RETURN COUNT(n); // 505 matches

// Result = 505 * 3 + 176
 

10 => 
MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season >= "2000-01" AND m.loser = t.name
RETURN DISTINCT t.name As Team, m.season As season, COUNT (m) AS Lost_match
ORDER BY season, Lost_match DESC;


MATCH (t:Team)-[:PLAYED]->(m:Match)
WHERE m.season >= "2000-01" AND m.loser = t.name
RETURN DISTINCT t.name As Team, m.season As season, co
ORDER BY season, Lost_match DESC;

